from Server.Objects import Object
from Server.Objects import Status
from Server.Objects import User
from enum import Enum


class EventRegistration(Enum):
    SuccessRegistration = "Success"
    LoginExist = "LoginExist"


defaultPhotoBase64 = ""


def registration(cursor, params):
    cursor.execute("select * from Authorization_info where login='{}'".format(params[User.Login.value]))
    row = cursor.fetchone()

    obj = Object()
    status = Object()

    if row is None:
        status.status = Status.Ok.value
        status.message = EventRegistration.SuccessRegistration.value

        cursor.execute("insert into Authorization_info (login, password) values('{}', '{}')"
                       .format(params[User.Login.value], params[User.Password.value])
                       )
        cursor.execute("select max(id) from Authorization_info")
        row = cursor.fetchone()
        id_auth = row[0]

        cursor.execute("insert into List_Comments (empty) values(null)")
        cursor.execute("select max(id) from List_Comments")
        row = cursor.fetchone()
        id_lcomment = row[0]

        cursor.execute("insert into Photo (id_list_photos, photo) values(null, '{}')"
                       .format(defaultPhotoBase64))
        cursor.execute("select max(id) from Photo")
        id_photo = cursor.fetchone()[0]

        cursor.execute("insert into Profile (id_authorization_info, id_list_comments, id_photo, name, about) \
                        values({}, {}, {}, null, null)".format(id_auth, id_lcomment, id_photo))

        cursor.execute("select max(id) from Profile;")
        row = cursor.fetchone()
        id_prof = row[0]

        if params.get(User.IsWitcher.value, None) == 1:
            cursor.execute("insert into Witcher (id_profile) values({})".format(id_prof))
            obj.is_witcher = True
        else:
            cursor.execute("insert into Client (id_profile) values({})".format(id_prof))
            obj.is_witcher = False
        status.object = obj
    else:
        status.status = Status.Error.value
        status.message = EventRegistration.LoginExist.value

    return status.toJSON()


def check_phone(cursor, params):
    cursor.execute("select id from Authorization_info where phone_number='{}'".format(params["phone_number"]))
    row = cursor.fetchone()
    status = Object()
    if row is None:
        status.status = Status.Ok.value
    else:
        status.status = Status.Error.value

    return status.toJSON()
